type Query {
    info: String!
    feed(filter: String, skip: Int, first: Int, orderBy: LinkOrderByInput): Feed!
    link(id: ID!): Link
}
type Feed{
    links: [Link!]!
    count: Int!
}
type Mutation {
    post(url: String!, description: String!): Link! 
    signup(email: String!, password: String!, name: String!) : AuthPayLoad
    login(email: String!, password: String!) : AuthPayLoad
    vote(linkId: ID!): Vote
    # Update a link
    updateLink(id: ID!, url: String, description: String): Link

    # Delete a link
    deleteLink(id: ID!): Link
}
type Link {
    id: ID!
    description: String!
    url: String!
    postedBy: User
    votes: [Vote!]!
}

type AuthPayLoad {
    token: String
    user: User
}

type User {
    id: ID!
    name: String!
    email: String!
    password: String!
    links: [Link!]!
    votes: [Vote!]!
}

type Subscription {
    newLink: Link
    newVote: Vote
}

type Vote {
    id: ID!
    link: Link!
    user: User!
}

enum LinkOrderByInput {
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
}